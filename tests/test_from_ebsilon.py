import sys
import os
import json

# Add the parent directory to the system path to import modules from the project
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

# Import the necessary modules and functions from exerpy
from src.exerpy.parser.from_ebsilon import ebsilon_parser  # Ebsilon parser to parse the model and extract data
from src.exerpy.analyses import ExergyAnalysis, _construct_components  # Exergy analysis tools and component construction

# Define the path to the Ebsilon model file
# model_path = os.path.abspath(os.path.join(os.path.dirname(__file__), 'ccpp.ebs'))
model_path = os.path.abspath(os.path.join(os.path.dirname(__file__), 'simple_test.ebs'))

# Define the output path for the JSON file generated by the parser
# output_path = os.path.abspath(os.path.join(os.path.dirname(__file__), 'results_ccpp_ebsilon.json'))
output_path = os.path.abspath(os.path.join(os.path.dirname(__file__), 'results_simple_test_ebsilon.json'))

try:
    # Check if the JSON file already exists
    if os.path.exists(output_path):
        # Load the JSON data from the existing file
        with open(output_path, 'r') as json_file:
            my_json_data = json.load(json_file)
        print("Loaded JSON data from file successfully.")
    else:
        # If the JSON file doesn't exist, run the Ebsilon parser and generate the JSON file
        my_json_data = ebsilon_parser.run_ebsilon(model_path, output_path)
        
        # Check if the JSON file was successfully created before printing the success message
        if os.path.exists(output_path):
            print("Parsed the Ebsilon model and generated JSON data successfully.")
        else:
            raise Exception("Ebsilon model parsing failed; JSON file not created.")
except FileNotFoundError as fnf_error:
    print(f"File not found: {fnf_error}")
except json.JSONDecodeError as json_error:
    print(f"Error parsing JSON: {json_error}")
except Exception as e:
    print(f"An unexpected error occurred: {e}")

from win32com.client import Dispatch
app = Dispatch("EbsOpen.Application")

'''from src.exerpy.parser.from_ebsilon.ebsilon_functions import add_eT_eM_to_stream

my_json_data = add_eT_eM_to_stream(app, my_json_data)'''

from src.exerpy.functions import mass_to_molar_fractions

print(my_json_data['connections']['2']['mass_composition'])

'''# Construct components from the JSON data
components = _construct_components(my_json_data)

# Assume T0 (ambient temperature) and p0 (ambient pressure) are defined
T0 = 15  # Example: 15Â°C
p0 = 1.013   # Example: Standard atmospheric pressure in bar

# Perform exergy analysis for the turbine
if "EXP" in components:
    turbine = components["EXP"]  # Get the turbine component (EXP is the label used in Ebsilon)
    turbine.calc_exergy_balance(T0, p0)  # Call the exergy balance method with ambient conditions

    # Print results for the turbine
    print(f"Exergy Fuel of EXP (E_F): {turbine.E_F}")
    print(f"Exergy Product of EXP (E_P): {turbine.E_P}")
    print(f"Exergy Destruction of EXP (E_D): {turbine.E_D}")
    print(f"Exergy Efficiency of EXP (epsilon): {turbine.epsilon}")
else:
    print("Turbine component not found in the data.")

# Perform exergy analysis for the compressor
if "AC" in components:
    compressor = components["AC"]  # Get the turbine component (AC is the label used in Ebsilon)
    compressor.calc_exergy_balance(T0, p0)  # Call the exergy balance method with ambient conditions

    # Print results for the turbine
    print(f"Exergy Fuel of AC (E_F): {compressor.E_F}")
    print(f"Exergy Product of AC (E_P): {compressor.E_P}")
    print(f"Exergy Destruction of AC (E_D): {compressor.E_D}")
    print(f"Exergy Efficiency of AC (epsilon): {compressor.epsilon}")
else:
    print("Compressor component not found in the data.")'''