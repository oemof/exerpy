import sys
import os
import json

# Add the parent directory to the system path to import modules from the project
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

# Import the necessary modules and functions from exerpy
from src.exerpy.parser.from_ebsilon import ebsilon_parser  # Ebsilon parser to parse the model and extract data
from src.exerpy.analyses import ExergyAnalysis, _construct_components  # Exergy analysis tools and component construction

# Define the path to the Ebsilon model file
# model_path = os.path.abspath(os.path.join(os.path.dirname(__file__), 'ccpp.ebs'))
model_path = os.path.abspath(os.path.join(os.path.dirname(__file__), 'simple_test.ebs'))

# Define the output path for the JSON file generated by the parser
# output_path = os.path.abspath(os.path.join(os.path.dirname(__file__), 'results_ccpp_ebsilon.json'))
output_path = os.path.abspath(os.path.join(os.path.dirname(__file__), 'results_simple_test_ebsilon.json'))

# Check if the JSON file already exists
if os.path.exists(output_path):
    # Load the JSON data from the existing file
    with open(output_path, 'r') as json_file:
        my_json_data = json.load(json_file)
    print("Loaded JSON data from file.")
else:
    # If the JSON file doesn't exist, run the Ebsilon parser and generate the JSON file
    my_json_data = ebsilon_parser.run_ebsilon(model_path, output_path)
    print("Parsed the Ebsilon model and generated JSON data.")

# Construct components from the JSON data
components = _construct_components(my_json_data)

# Assume T0 (ambient temperature) and p0 (ambient pressure) are defined
T0 = 15  # Example: 15Â°C
p0 = 1.013   # Example: Standard atmospheric pressure in bar

# Perform exergy analysis for the turbine
if "GT" in components:
    turbine = components["GT"]  # Get the turbine component (GT is the label used in the JSON)
    turbine.calc_exergy_balance(T0, p0)  # Call the exergy balance method with ambient conditions

    # Print results for the turbine
    print(f"Exergy Fuel (E_F): {turbine.E_F}")
    print(f"Exergy Product (E_P): {turbine.E_P}")
    print(f"Exergy Destruction (E_D): {turbine.E_D}")
    print(f"Exergy Efficiency (epsilon): {turbine.epsilon}")
else:
    print("Turbine component not found in the data.")

# Perform exergy analysis for the compressor
if "COMP" in components:
    turbine = components["COMP"]  # Get the turbine component (COMP is the label used in the JSON)
    turbine.calc_exergy_balance(T0, p0)  # Call the exergy balance method with ambient conditions

    # Print results for the turbine
    print(f"Exergy Fuel (E_F): {turbine.E_F}")
    print(f"Exergy Product (E_P): {turbine.E_P}")
    print(f"Exergy Destruction (E_D): {turbine.E_D}")
    print(f"Exergy Efficiency (epsilon): {turbine.epsilon}")
else:
    print("Compressor component not found in the data.")